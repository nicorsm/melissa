// Wire
// Copyright (C) 2018 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.

use codec::*;
use std::ops::Range;

pub fn log2(n: usize) -> usize {
    let mut r = 0;
    let mut m = n;
    while m > 1 {
        m >>= 1;
        r += 1;
    }
    r
}

pub fn pow2(n: usize) -> usize {
    match n {
        0 => 1,
        _ => 2 << (n - 1),
    }
}

pub fn level(n: usize) -> usize {
    if (n & 0x01) == 0 {
        return 0;
    }
    let mut k = 0;
    while ((n >> k) & 0x01) == 1 {
        k += 1;
    }
    k
}

pub fn node_width(n: usize) -> usize {
    2 * (n - 1) + 1
}

pub fn assert_in_range(x: usize, n: usize) {
    if x > node_width(n) {
        panic!("node index out of range ({} > {})", x, n);
    }
}

pub fn root(n: usize) -> usize {
    let w = node_width(n);
    (1 << log2(w)) - 1
}

pub fn left(x: usize) -> usize {
    if level(x) == 0 {
        return x;
    }
    x ^ (0x01 << (level(x) - 1))
}

pub fn right(x: usize, n: usize) -> usize {
    assert_in_range(x, n);
    if level(x) == 0 {
        return x;
    }
    let mut r = x ^ (0x03 << (level(x) - 1));
    while r >= node_width(n) {
        r = left(r);
    }
    r
}

pub fn parent_step(x: usize) -> usize {
    let k = level(x);
    (x | (1 << k)) & !(1 << (k + 1))
}

pub fn parent(x: usize, n: usize) -> usize {
    assert_in_range(x, n);

    if x == root(n) {
        return x;
    }
    let mut p = parent_step(x);
    while p >= node_width(n) {
        p = parent_step(p);
    }
    p
}

pub fn sibling(x: usize, n: usize) -> usize {
    assert_in_range(x, n);

    let p = parent(x, n);
    if x < p {
        return right(p, n);
    } else if x > p {
        return left(p);
    }
    // root's sibling is itself
    p
}

// Ordered from leaf to root
// Includes leaf, but not root
pub fn dirpath(x: usize, n: usize) -> Vec<usize> {
    assert_in_range(x, n);
    if x == root(n) {
        return Vec::new();
    }
    let mut dirpath = vec![x];
    let mut node_parent = parent(x, n);
    let root = root(n);
    while node_parent != root {
        dirpath.push(node_parent);
        node_parent = parent(node_parent, n);
    }
    dirpath
}

// Ordered from leaf to root
pub fn copath(x: usize, n: usize) -> Vec<usize> {
    dirpath(x, n).iter().map(|&x| sibling(x, n)).collect()
}

pub fn leaves(n: usize) -> Vec<usize> {
    Range { start: 0, end: n }.map(|x| 2 * x).collect()
}

pub fn bytes_to_hex(bytes: &[u8]) -> String {
    let mut hex = String::new();
    for b in bytes {
        hex += &format!("{:02X}", *b);
    }
    hex
}

pub fn hex_to_bytes(hex: &str) -> Vec<u8> {
    let mut bytes = Vec::new();
    for i in 0..(hex.len() / 2) {
        let b = u8::from_str_radix(&hex[2 * i..2 * i + 2], 16).unwrap();
        bytes.push(b);
    }
    bytes
}

pub enum FunctionType {
    OneArg(fn(usize) -> usize),
    TwoArgs(fn(usize, usize) -> usize),
    TwoArgsPath(fn(usize, usize) -> Vec<usize>),
}

pub enum ReturnType {
    Primitive(Vec<usize>),
    Vector(Vec<Vec<usize>>),
}

pub fn gen_vector(range_start: usize, range_end: usize, size: usize, fs: FunctionType) -> Vec<u8> {
    let range = Range {
        start: range_start,
        end: range_end,
    };
    let mut test_vector: Vec<u8> = Vec::new();
    let mut test_vector_2d: Vec<Vec<u8>> = Vec::new();
    for i in range {
        match fs {
            FunctionType::OneArg(f) => {
                test_vector.push(f(i) as u8);
            }
            FunctionType::TwoArgs(f) => {
                test_vector.push(f(i, size) as u8);
            }
            FunctionType::TwoArgsPath(f) => {
                let sub_vector_usize = f(i, size);
                let mut sub_vector_u8 = Vec::new();
                sub_vector_usize
                    .iter()
                    .for_each(|&x| sub_vector_u8.push(x as u8));
                test_vector_2d.push(sub_vector_u8);
            }
        }
    }

    let mut buffer = Vec::new();
    let num_elements = range_end - range_start + 1;
    (num_elements as u8).encode(&mut buffer);

    match fs {
        FunctionType::OneArg(_) => {
            encode_vec_u8(&mut buffer, &mut test_vector);
        }
        FunctionType::TwoArgs(_) => {
            encode_vec_u8(&mut buffer, &mut test_vector);
        }
        FunctionType::TwoArgsPath(_) => {
            for e in test_vector_2d.iter_mut() {
                (e.len() as u8).encode(&mut buffer);
                encode_vec_u8(&mut buffer, e);
            }
        }
    }
    buffer
}

pub fn read_vector(rt: ReturnType, buffer: &[u8]) -> ReturnType {
    let mut vector = Vec::new();
    let mut vector2d = Vec::new();
    let mut cursor = Cursor::new(buffer);

    match rt {
        ReturnType::Primitive(_) => {
            let vector_usize: Vec<u8> = decode_vec_u8(&mut cursor).unwrap();
            vector_usize.iter().for_each(|&x| vector.push(x as usize));
            ReturnType::Primitive(vector)
        }
        ReturnType::Vector(_) => {
            let size = cursor.take(1).unwrap()[0];
            for _ in 0..size {
                let mut sub_vector = Vec::new();
                let sub_vector_usize: Vec<u8> = decode_vec_u8(&mut cursor).unwrap();
                sub_vector_usize
                    .iter()
                    .for_each(|&x| sub_vector.push(x as usize));
                vector2d.push(sub_vector);
            }
            ReturnType::Vector(vector2d)
        }
    }
}

#[test]
fn print_test_vectors() {
    let size = 255;
    println!(
        "Test vector for root() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(1, size, size, FunctionType::OneArg(root),))
    );
    println!(
        "Test vector for level() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(0, size - 1, size, FunctionType::OneArg(level),))
    );
    println!(
        "Test vector for node_width() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(1, size, size, FunctionType::OneArg(node_width),))
    );
    println!(
        "Test vector for left() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(0, size - 1, size, FunctionType::OneArg(left),))
    );
    println!(
        "Test vector for parent_step() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::OneArg(parent_step),
        ))
    );
    println!(
        "Test vector for right() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(0, size - 1, size, FunctionType::TwoArgs(right),))
    );
    println!(
        "Test vector for parent() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgs(parent),
        ))
    );
    println!(
        "Test vector for sibling() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgs(sibling),
        ))
    );
    println!(
        "Test vector for dirpath() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgsPath(dirpath),
        ))
    );
    println!(
        "Test vector for copath() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgsPath(copath),
        ))
    );
}

#[test]
fn compare_test_vectors() {
    fn test_vector(
        test_vector_hex: &str,
        range_start: usize,
        size: usize,
        ft: FunctionType,
    ) -> bool {
        let test_vector = hex_to_bytes(test_vector_hex);
        let gen_vector = gen_vector(range_start, size + range_start - 1, size, ft);
        assert_eq!(gen_vector, test_vector);
        gen_vector == test_vector
    }

    let size = 255;
    let root_hex = "FFFE00010303070707070F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF";
    assert!(test_vector(root_hex, 1, size, FunctionType::OneArg(root)));
    let level_hex
    assert!(test_vector(level_hex, 0, size, FunctionType::OneArg(level)));
    let node_width_hex = "FFFE01030507090B0D0F11131517191B1D1F21232527292B2D2F31333537393B3D3F41434547494B4D4F51535557595B5D5F61636567696B6D6F71737577797B7D7F81838587898B8D8F91939597999B9D9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBDBFC1C3C5C7C9CBCDCFD1D3D5D7D9DBDDDFE1E3E5E7E9EBEDEFF1F3F5F7F9FBFDFF01030507090B0D0F11131517191B1D1F21232527292B2D2F31333537393B3D3F41434547494B4D4F51535557595B5D5F61636567696B6D6F71737577797B7D7F81838587898B8D8F91939597999B9D9FA1A3A5A7A9ABADAFB1B3B5B7B9BBBDBFC1C3C5C7C9CBCDCFD1D3D5D7D9DBDDDFE1E3E5E7E9EBEDEFF1F3F5F7F9FB";
    assert!(test_vector(
        node_width_hex,
        1,
        size,
        FunctionType::OneArg(node_width)
    ));
    let left_hex = "FFFE000002010404060308080A090C0C0E07101012111414161318181A191C1C1E0F202022212424262328282A292C2C2E27303032313434363338383A393C3C3E1F404042414444464348484A494C4C4E47505052515454565358585A595C5C5E4F606062616464666368686A696C6C6E67707072717474767378787A797C7C7E3F808082818484868388888A898C8C8E87909092919494969398989A999C9C9E8FA0A0A2A1A4A4A6A3A8A8AAA9ACACAEA7B0B0B2B1B4B4B6B3B8B8BAB9BCBCBE9FC0C0C2C1C4C4C6C3C8C8CAC9CCCCCEC7D0D0D2D1D4D4D6D3D8D8DAD9DCDCDECFE0E0E2E1E4E4E6E3E8E8EAE9ECECEEE7F0F0F2F1F4F4F6F3F8F8FAF9FCFC";
    assert!(test_vector(left_hex, 0, size, FunctionType::OneArg(left)));
    let parent_step_hex = "FFFE010301070503050F090B09070D0B0D1F111311171513150F191B19171D1B1D3F212321272523252F292B29272D2B2D1F313331373533352F393B39373D3B3D7F414341474543454F494B49474D4B4D5F515351575553554F595B59575D5B5D3F616361676563656F696B69676D6B6D5F717371777573756F797B79777D7B7DFF818381878583858F898B89878D8B8D9F919391979593958F999B99979D9B9DBFA1A3A1A7A5A3A5AFA9ABA9A7ADABAD9FB1B3B1B7B5B3B5AFB9BBB9B7BDBBBD7FC1C3C1C7C5C3C5CFC9CBC9C7CDCBCDDFD1D3D1D7D5D3D5CFD9DBD9D7DDDBDDBFE1E3E1E7E5E3E5EFE9EBE9E7EDEBEDDFF1F3F1F7F5F3F5EFF9FBF9F7FDFB";
    assert!(test_vector(
        parent_step_hex,
        0,
        size,
        FunctionType::OneArg(parent_step)
    ));
    let right_hex = "FFFE000202050406060B080A0A0D0C0E0E17101212151416161B181A1A1D1C1E1E2F202222252426262B282A2A2D2C2E2E37303232353436363B383A3A3D3C3E3E5F404242454446464B484A4A4D4C4E4E57505252555456565B585A5A5D5C5E5E6F606262656466666B686A6A6D6C6E6E77707272757476767B787A7A7D7C7E7EBF808282858486868B888A8A8D8C8E8E97909292959496969B989A9A9D9C9E9EAFA0A2A2A5A4A6A6ABA8AAAAADACAEAEB7B0B2B2B5B4B6B6BBB8BABABDBCBEBEDFC0C2C2C5C4C6C6CBC8CACACDCCCECED7D0D2D2D5D4D6D6DBD8DADADDDCDEDEEFE0E2E2E5E4E6E6EBE8EAEAEDECEEEEF7F0F2F2F5F4F6F6FBF8FAFAFDFCFE";
    assert!(test_vector(
        right_hex,
        0,
        size,
        FunctionType::TwoArgs(right)
    ));
    let parent_hex = "FFFE010301070503050F090B09070D0B0D1F111311171513150F191B19171D1B1D3F212321272523252F292B29272D2B2D1F313331373533352F393B39373D3B3D7F414341474543454F494B49474D4B4D5F515351575553554F595B59575D5B5D3F616361676563656F696B69676D6B6D5F717371777573756F797B79777D7B7DFF818381878583858F898B89878D8B8D9F919391979593958F999B99979D9B9DBFA1A3A1A7A5A3A5AFA9ABA9A7ADABAD9FB1B3B1B7B5B3B5AFB9BBB9B7BDBBBD7FC1C3C1C7C5C3C5CFC9CBC9C7CDCBCDDFD1D3D1D7D5D3D5CFD9DBD9D7DDDBDDBFE1E3E1E7E5E3E5EFE9EBE9E7EDEBEDDFF1F3F1F7F5F3F5EFF9FBF9F7FDFB";
    assert!(test_vector(
        parent_hex,
        0,
        size,
        FunctionType::TwoArgs(parent)
    ));
    let sibling_hex = "FFFE0205000B060104170A0D08030E090C2F1215101B161114071A1D18131E191C5F2225202B262124372A2D28232E292C0F3235303B363134273A3D38333E393CBF4245404B464144574A4D48434E494C6F5255505B565154475A5D58535E595C1F6265606B666164776A6D68636E696C4F7275707B767174677A7D78737E797C7F8285808B868184978A8D88838E898CAF9295909B969194879A9D98939E999CDFA2A5A0ABA6A1A4B7AAADA8A3AEA9AC8FB2B5B0BBB6B1B4A7BABDB8B3BEB9BC3FC2C5C0CBC6C1C4D7CACDC8C3CEC9CCEFD2D5D0DBD6D1D4C7DADDD8D3DED9DC9FE2E5E0EBE6E1E4F7EAEDE8E3EEE9ECCFF2F5F0FBF6F1F4E7FAFDF8F3FEF9";
    assert!(test_vector(
        sibling_hex,
        0,
        size,
        FunctionType::TwoArgs(sibling)
    ));
    let dirpath_hex
    assert!(test_vector(
        dirpath_hex,
        0,
        size,
        FunctionType::TwoArgsPath(dirpath)
    ));
    let copath_hex
    assert!(test_vector(
        copath_hex,
        0,
        size,
        FunctionType::TwoArgsPath(copath)
    ));
}
