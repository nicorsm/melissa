// Wire
// Copyright (C) 2018 Wire Swiss GmbH
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see http://www.gnu.org/licenses/.

use codec::*;
use std::ops::Range;

pub fn log2(n: usize) -> usize {
    let mut r = 0;
    let mut m = n;
    while m > 1 {
        m >>= 1;
        r += 1;
    }
    r
}

pub fn pow2(n: usize) -> usize {
    match n {
        0 => 1,
        _ => 2 << (n - 1),
    }
}

pub fn level(n: usize) -> usize {
    if (n & 0x01) == 0 {
        return 0;
    }
    let mut k = 0;
    while ((n >> k) & 0x01) == 1 {
        k += 1;
    }
    k
}

pub fn node_width(n: usize) -> usize {
    2 * (n - 1) + 1
}

pub fn assert_in_range(x: usize, n: usize) {
    if x > node_width(n) {
        panic!("node index out of range ({} > {})", x, n);
    }
}

pub fn root(n: usize) -> usize {
    let w = node_width(n);
    (1 << log2(w)) - 1
}

pub fn left(x: usize) -> usize {
    if level(x) == 0 {
        return x;
    }
    x ^ (0x01 << (level(x) - 1))
}

pub fn right(x: usize, n: usize) -> usize {
    assert_in_range(x, n);
    if level(x) == 0 {
        return x;
    }
    let mut r = x ^ (0x03 << (level(x) - 1));
    while r >= node_width(n) {
        r = left(r);
    }
    r
}

pub fn parent_step(x: usize) -> usize {
    let k = level(x);
    (x | (1 << k)) & !(1 << (k + 1))
}

pub fn parent(x: usize, n: usize) -> usize {
    if x == root(n) {
        return x;
    }

    let l0 = level(x);
    let l1 = level(x) + 1;
    let distance = pow2(l1);
    let left_offset = pow2(l0) - 1;

    let parity = (x - left_offset) / distance;
    let p = if parity & 0x01 == 1 {
        x - (distance / 2)
    } else {
        x + (distance / 2)
    };

    if p >= node_width(n) {
        parent(p, n)
    } else {
        p
    }
}

pub fn sibling(x: usize, n: usize) -> usize {
    assert_in_range(x, n);

    let p = parent(x, n);
    if x < p {
        return right(p, n);
    } else if x > p {
        return left(p);
    }
    // root's sibling is itself
    p
}

// Ordered from leaf to root
// Includes leaf, but not root
pub fn dirpath(x: usize, n: usize) -> Vec<usize> {
    assert_in_range(x, n);
    if x == root(n) {
        return Vec::new();
    }
    let mut dirpath = vec![x];
    let mut node_parent = parent(x, n);
    let root = root(n);
    while node_parent != root {
        dirpath.push(node_parent);
        node_parent = parent(node_parent, n);
    }
    dirpath
}

// Ordered from leaf to root
pub fn copath(x: usize, n: usize) -> Vec<usize> {
    dirpath(x, n).iter().map(|&x| sibling(x, n)).collect()
}

pub fn leaves(n: usize) -> Vec<usize> {
    Range { start: 0, end: n }.map(|x| 2 * x).collect()
}

#[derive(Clone, Copy)]
pub enum FunctionType {
    OneArg(fn(usize) -> usize),
    TwoArgs(fn(usize, usize) -> usize),
    TwoArgsPath(fn(usize, usize) -> Vec<usize>),
}

pub enum ReturnType {
    Primitive(Vec<usize>),
    Vector(Vec<Vec<usize>>),
}

pub fn gen_vector(range_start: usize, range_end: usize, size: usize, ft: FunctionType) -> Vec<u8> {
    let range = Range {
        start: range_start,
        end: range_end,
    };
    let mut test_vector: Vec<u32> = Vec::new();
    let mut test_vector_2d: Vec<Vec<u32>> = Vec::new();
    for i in range {
        match ft {
            FunctionType::OneArg(f) => {
                test_vector.push(f(i) as u32);
            }
            FunctionType::TwoArgs(f) => {
                test_vector.push(f(i, size) as u32);
            }
            FunctionType::TwoArgsPath(f) => {
                let sub_vector_usize = f(i, size);
                let mut sub_vector_u32 = Vec::new();
                sub_vector_usize
                    .iter()
                    .for_each(|&x| sub_vector_u32.push(x as u32));
                test_vector_2d.push(sub_vector_u32);
            }
        }
    }

    let mut buffer = Vec::new();

    match ft {
        FunctionType::OneArg(_) => {
            encode_vec_u32(&mut buffer, &test_vector);
        }
        FunctionType::TwoArgs(_) => {
            encode_vec_u32(&mut buffer, &test_vector);
        }
        FunctionType::TwoArgsPath(_) => {
            for e in test_vector_2d.iter_mut() {
                (e.len() as u32).encode(&mut buffer);
                encode_vec_u32(&mut buffer, e);
            }
        }
    }
    buffer
}

pub fn read_vector(rt: &ReturnType, buffer: &[u8]) -> ReturnType {
    let mut vector = Vec::new();
    let mut vector2d = Vec::new();
    let mut cursor = Cursor::new(buffer);

    match *rt {
        ReturnType::Primitive(_) => {
            let vector_usize: Vec<u32> = decode_vec_u32(&mut cursor).unwrap();
            vector_usize.iter().for_each(|&x| vector.push(x as usize));
            ReturnType::Primitive(vector)
        }
        ReturnType::Vector(_) => {
            let size = u32::decode(&mut cursor).unwrap();
            //let size = cursor.take(1).unwrap()[0];
            for _ in 0..size {
                let mut sub_vector = Vec::new();
                let sub_vector_usize: Vec<u32> = decode_vec_u32(&mut cursor).unwrap();
                sub_vector_usize
                    .iter()
                    .for_each(|&x| sub_vector.push(x as usize));
                vector2d.push(sub_vector);
            }
            ReturnType::Vector(vector2d)
        }
    }
}

#[test]
fn print_test_vectors() {
    use utils::*;

    let size = 255;
    println!(
        "Test vector for root() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(1, size, size, FunctionType::OneArg(root),))
    );
    println!(
        "Test vector for level() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(0, size - 1, size, FunctionType::OneArg(level),))
    );
    println!(
        "Test vector for node_width() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(1, size, size, FunctionType::OneArg(node_width),))
    );
    println!(
        "Test vector for left() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(0, size - 1, size, FunctionType::OneArg(left),))
    );
    println!(
        "Test vector for parent_step() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::OneArg(parent_step),
        ))
    );
    println!(
        "Test vector for right() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(0, size - 1, size, FunctionType::TwoArgs(right),))
    );
    println!(
        "Test vector for parent() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgs(parent),
        ))
    );
    println!(
        "Test vector for sibling() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgs(sibling),
        ))
    );
    println!(
        "Test vector for dirpath() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgsPath(dirpath),
        ))
    );
    println!(
        "Test vector for copath() with size {}:\n{}",
        size,
        bytes_to_hex(&gen_vector(
            0,
            size - 1,
            size,
            FunctionType::TwoArgsPath(copath),
        ))
    );
}

#[test]
fn compare_test_vectors() {
    use utils::*;

    fn test_vector(
        test_vector_hex: &str,
        range_start: usize,
        size: usize,
        ft: FunctionType,
    ) -> bool {
        let test_vector = hex_to_bytes(test_vector_hex);
        let gen_vector = gen_vector(range_start, size + range_start - 1, size, ft);
        assert_eq!(gen_vector, test_vector);
        gen_vector == test_vector
    }

    let size = 255;
    let root_hex
    assert!(test_vector(root_hex, 1, size, FunctionType::OneArg(root)));
    let level_hex
    assert!(test_vector(level_hex, 0, size, FunctionType::OneArg(level)));
    let node_width_hex
    assert!(test_vector(
        node_width_hex,
        1,
        size,
        FunctionType::OneArg(node_width)
    ));
    let left_hex
    assert!(test_vector(left_hex, 0, size, FunctionType::OneArg(left)));
    let parent_step_hex = "000003F8000000010000000300000001000000070000000500000003000000050000000F000000090000000B00000009000000070000000D0000000B0000000D0000001F000000110000001300000011000000170000001500000013000000150000000F000000190000001B00000019000000170000001D0000001B0000001D0000003F000000210000002300000021000000270000002500000023000000250000002F000000290000002B00000029000000270000002D0000002B0000002D0000001F000000310000003300000031000000370000003500000033000000350000002F000000390000003B00000039000000370000003D0000003B0000003D0000007F000000410000004300000041000000470000004500000043000000450000004F000000490000004B00000049000000470000004D0000004B0000004D0000005F000000510000005300000051000000570000005500000053000000550000004F000000590000005B00000059000000570000005D0000005B0000005D0000003F000000610000006300000061000000670000006500000063000000650000006F000000690000006B00000069000000670000006D0000006B0000006D0000005F000000710000007300000071000000770000007500000073000000750000006F000000790000007B00000079000000770000007D0000007B0000007D000000FF000000810000008300000081000000870000008500000083000000850000008F000000890000008B00000089000000870000008D0000008B0000008D0000009F000000910000009300000091000000970000009500000093000000950000008F000000990000009B00000099000000970000009D0000009B0000009D000000BF000000A1000000A3000000A1000000A7000000A5000000A3000000A5000000AF000000A9000000AB000000A9000000A7000000AD000000AB000000AD0000009F000000B1000000B3000000B1000000B7000000B5000000B3000000B5000000AF000000B9000000BB000000B9000000B7000000BD000000BB000000BD0000007F000000C1000000C3000000C1000000C7000000C5000000C3000000C5000000CF000000C9000000CB000000C9000000C7000000CD000000CB000000CD000000DF000000D1000000D3000000D1000000D7000000D5000000D3000000D5000000CF000000D9000000DB000000D9000000D7000000DD000000DB000000DD000000BF000000E1000000E3000000E1000000E7000000E5000000E3000000E5000000EF000000E9000000EB000000E9000000E7000000ED000000EB000000ED000000DF000000F1000000F3000000F1000000F7000000F5000000F3000000F5000000EF000000F9000000FB000000F9000000F7000000FD000000FB";
    assert!(test_vector(
        parent_step_hex,
        0,
        size,
        FunctionType::OneArg(parent_step)
    ));
    let right_hex
    assert!(test_vector(
        right_hex,
        0,
        size,
        FunctionType::TwoArgs(right)
    ));
    let parent_hex
    assert!(test_vector(
        parent_hex,
        0,
        size,
        FunctionType::TwoArgs(parent)
    ));
    let sibling_hex
    assert!(test_vector(
        sibling_hex,
        0,
        size,
        FunctionType::TwoArgs(sibling)
    ));
    let dirpath_hex
    assert!(test_vector(
        dirpath_hex,
        0,
        size,
        FunctionType::TwoArgsPath(dirpath)
    ));
    let copath_hex
    assert!(test_vector(
        copath_hex,
        0,
        size,
        FunctionType::TwoArgsPath(copath)
    ));
}
